public function upgradeBuilding(string $buildingName) : bool
    {
        $currentLVL = $this->buildings[$buildingName];
        $cost = $this->upgradeCost[$buildingName][$currentLVL+1];
           foreach ($cost as $key => $value) {
            //key - nazwa surowca
            //value koszt surowca
             if($value > $this->storage[$key])
                return false;
        }
         foreach ($cost as $key => $value) {
         //odejmujemy surowce na budynek
         $this->storage[$key] -= $value;
        }
        //podnies lvl budynku o 1
        $this->buildings[$buildingName] += 1; 
        return true;
    }
       public function showHourGain(string $resource) : string
    {
        switch($resource) {
            case 'wood':
                 return $this->woodGain(3600);
            break;
            case 'iron':
                 return $this->ironGain(3600);
            break;
            default:
                echo "Nie ma takiego surowca!";
            break;
        }
    }
        public function showStorage(string $resource) : string 
    {
        if(isset($this->storage[$resource]))
        {
          return floor($this->storage[$resource]);
        }
          else
        {
          return "Nie ma takiego surowca!";
        }
    }
       public function buildingLVL(string $building) : int 
    {
       return $this->buildings[$building];
    }























    <?php
class Village 
{
    private $buildings;
    private $storage;
    private $upgradeCost;

    public function __construct()
    {
        $this->buildings = array(
            'townHall' => 1,
            'woodcutter' => 1,
            'ironMine' => 1,
            'goldMine' => 1,
            'quarry' => 1,
            'barraki' => 1,
        );
        $this->storage = array(
                'wood' => 0,
                'iron' => 0,
                'gold' => 0,
                'stone' => 0,
                'weapons' => 0,
        );
        $this->upgradeCost = array( //tablica wszystkich budynkow
            'woodcutter' => array(
                    2 => array(
                        'wood' => 100,
                        'iron' => 50,
                    ),
                ),
            'ironMine' => array(
                    1 => array(
                        'wood' => 100,
                    ),
                    2 => array(
                        'wood' => 300,
                        'iron' => 100,
                    )
                ),
            'goldMine' => array(
                    1 => array(
                        'iron' => 100,
                    ),
                    2 => array(
                        'wood' => 600,
                        'iron' => 200,
                        'gold' => 100,
                    )
                ),
            'quarry' => array(
                    1 => array(
                        'wood' => 500,
                    ),
                    2 => array(
                        'wood' => 1500,
                        'iron' => 125,
                        'gold' => 100,
                    )
                ),
            'barraki' => array(
                     1 => array(
                        'iron' => 2000,
                        'gold' => 8000,
                     ),
                     2 => array(
                         'iron' => 4000,
                         'gold' => 16000,
                     ),
                )
            );
    } 
    private function woodGain(int $deltaTime) : float
    {
        //liczymy zysk na godzine z wzoru poziom_drwala ^ 2
        $gain = pow($this->buildings['woodcutter'],2) * 100;
        // liczymy zysk na sekunde (godzina/3600)
        $perSecondGain = $gain / 3600;
        //zwracamy zysk w czasie $deltaTime
        return $perSecondGain * $deltaTime;
    }
    private function ironGain(int $deltaTime) : float
    {
        //liczymy zysk na godzine z wzoru poziom_drwala ^ 2
        $gain = pow($this->buildings['ironMine'],2) * 5000;
        // liczymy zysk na sekunde (godzina/3600)
        $perSecondGain = $gain / 3600;
        //zwracamy zysk w czasie $deltaTime
        return $perSecondGain * $deltaTime;
    }
    private function goldGain(int $deltaTime) : float
    {
        //liczymy zysk na godzine z wzoru poziom_Złotkina ^ 2
        $gain = pow($this->buildings['goldMine'],2) * 50;
        $perSecondGain = $gain / 3600;
        //zwracamy zysk w czasie $deltaTime
        return $perSecondGain * $deltaTime;
    }
    private function stoneGain(int $deltaTime) : float
    {
        //liczymy zysk na godzine z wzoru poziom_Kamieniarza ^ 2
        $gain = pow($this->buildings['quarry'],2) * 50;
        $perSecondGain = $gain / 3600;
        //zwracamy zysk w czasie $deltaTime
        return $perSecondGain * $deltaTime;
    }
    private function weaponsGain(int $deltaTime) : float
    {
       //liczymy zysk na godzine z wzoru poziom_Wojska ^ 2
       $gain = pow($this->buildings['barraki'],2) * 50;
       $perSecondGain = $gain / 3600;
       //zwracamy zysk w casie $deltaTime
       return $perSecondGain * $deltaTime;
    }
    
    public function gain($deltaTime) 
    {
        $this->storage['wood'] += $this->woodGain($deltaTime);
        $this->storage['iron'] += $this->ironGain($deltaTime);
        $this->storage['gold'] += $this->goldGain($deltaTime);
        $this->storage['stone'] += $this->stoneGain($deltaTime);
        $this->storage['weapons'] += $this->weaponsGain($deltaTime);
    }

}
?>





































var_dump($v);
            var_dump($_REQUEST);


produkcja broni

60 - 1min
300 - 5min
3600 - 1h



Zrobione:
    Surowce:            
    Drewno              Woda
    Złoto               Uran
    Żelazo              Medykamenty
    Kamień              Benzyna
    Broń                Części
    Żniwa               Mięso

    Budynki:
    Ratusz              Bunkier
    Baraki              Złomowisko
    Kamieniołom         Stacja Paliw
    Kowal               Apteka
    Skarbiec            Kopalnia Uranu
    Tartak              studnia
    pole                Łąka
    foodearth           

    WŁÓcznicy           Boty Ofensywne
    Łucznicy            Boty Defensywne
    Kawaleria           Boty Latające


30 Części = 1 robot



mysqli_connect($hostname,$username, $password) albo die ("html>script language='JavaScript'>alert('Nie można nawiązać połączenia z bazą danych! Spróbuj ponownie później.'),history.go(-1)/script>/html>");
	mysqli_select_db($dbname);
    # Sprawdź, czy dany rekord istnieje
	
	$query = "SELECT * FROM $usertable";
	
	$result = mysqli_query($query);
	
	if($result){
		while($row = mysqli_fetch_array($result)){
			$name = $row["$yourfield"];
			echo "Nazwa: ".$name."br/>";
		}
	}